%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: ShellScript Improved
file_extensions:
  - bash
  - sh
  - zsh
  - .bash_aliases
  - .bash_functions
  - .bash_login
  - .bash_logout
  - .bash_profile
  - .bash_variables
  - .bashrc
  - .profile
  - .textmate_init
  - .zshrc
first_line_match: ^#!.*\b(bash|zsh|sh)\b|^#\s*-\*-[^*]*mode:\s*shell-script[^*]*-\*-
scope: source.shell
variables:
  variable_name: (?:[a-zA-Z_][0-9a-zA-Z_]*)
  version_string: (?:[0-9_.+-][0-9a-zA-Z_.+-]*)
  cmd_unknown: (?:(?:[^\\\s><&;|!()`]|\\.)+)
  cmd_privilege: '(?x:
    gksudo|
    gksu|
    su|
    sudo
  )'
  cmd_external: '(?x:
    7za|
    7z|
    apropos|
    apt(?:-[a-zA-Z_]+)*|
    aptitude|
    aria2c|
    ar|
    aspell|
    autoconf|
    awk|
    base64|
    basename|
    bash|
    bc|
    brew|
    bzip2|
    cal|
    cat|
    cc|
    cfdisk|
    chfn|
    chgrp|
    chkconfig|
    chmod|
    chown|
    chpasswd|
    chroot|
    chsh|
    cksum|
    clang|
    clear|
    cmake|
    cmp|
    column|
    comm|
    composer|
    cp|
    crontab|
    cron|
    csh|
    csplit|
    curl|
    cut|
    date|
    dc|
    ddrescue|
    dd|
    deb|
    depmod|
    df|
    diff|
    dig|
    dircolors|
    dirname|
    dir|
    dmesg|
    dpkg|
    du|
    easy_install|
    egrep|
    eject|
    emacs|
    env|
    expand|
    expect|
    expr|
    fdformat|
    fdisk|
    fgrep|
    file|
    find|
    finger|
    fmt|
    fold|
    format|
    free|
    fsck|
    ftp|
    function|
    fusermount|
    fuser|
    g\+\+|
    gawk|
    gcc|
    gem|
    getfacl|
    git|
    gpasswd|
    grep|
    groupadd|
    groupdel|
    groupmd|
    groups|
    gzip|
    head|
    hg|
    homebrew|
    hostname|
    htop|
    iconv|
    id|
    ifconfig|
    ifdown|
    ifup|
    import|
    info|
    insmod|
    jar|
    java|
    join|
    kermit|
    killall|
    kmod|
    ldconfig|
    less|
    lftp|
    link|
    llvm|
    ln|
    locate|
    logname|
    look|
    loout|
    lpc|
    lpq|
    lprintd|
    lprintq|
    lprint|
    lprm|
    lpr|
    lsb_release|
    lsod|
    lsof|
    ls|
    lua|
    mail|
    make|
    man|
    md5sum|
    mesg|
    mkdir|
    mkfifo|
    mkisofs|
    mknod|
    mmv|
    modinfo|
    modprobe|
    more|
    most|
    mount|
    mtools|
    mtr|
    mutt|
    mv|
    mysqldump|
    mysql|
    netstat|
    nl|
    node|
    notify-se|
    npm|
    nslookup|
    nstat|
    openssl|
    open|
    op|
    pandoc|
    passwd|
    paste|
    patch|
    pathchk|
    pear|
    pecl|
    perl|
    php|
    ping|
    pip|
    pkg-config|
    pkgdata|
    pkill|
    printcap|
    pr|
    ps|
    pv|
    pwck|
    pwconv|
    pwunconv|
    python|
    py|
    qmake|
    quotachec|
    quotactl|
    quota|
    ram|
    rar|
    rcp|
    realpath|
    reboot|
    remsync|
    renae|
    renice|
    rev|
    rmdir|
    rmmod|
    rm|
    rpm|
    rsync|
    ruby|
    scp|
    screen|
    sdiff|
    sed|
    select|
    seq|
    service|
    setfacl|
    sftp|
    shutdown|
    sh|
    sleep|
    slocate|
    sort|
    split|
    sqlite|
    ssh-keygen|
    sshfs|
    ssh|
    stat|
    strace|
    subl|
    sum|
    susend|
    svn|
    sync|
    sysctl|
    systemctl|
    tac|
    tail|
    tar|
    tcsh|
    tee|
    test|
    thtool|
    tig|
    timeout|
    top|
    touch|
    tput|
    tracerout|
    tr|
    tsort|
    tty|
    umount|
    uname|
    unexpand|
    unil|
    uniq|
    units|
    unlink|
    unrar|
    unshar|
    unzip|
    updatedb|
    uptime|
    useradd|
    userdel|
    usermod|
    users|
    uudecode|
    uuencode|
    vim|
    visudo|
    vi|
    vmstat|
    wall|
    watch|
    wc|
    wget|
    whatis|
    whereis|
    which|
    whoami|
    who|
    write|
    w|
    xargs|
    xdg-open|
    xxd|
    xz|
    yes|
    ypcat|
    ypchfn|
    ypchsh|
    yppasswd|
    yptest|
    ypwhich|
    yum|
    zip|
    zsh
  )(?:{{version_string}}?)'
  cmd_builtin: '(?x:
    alias|
    bg|
    bind|
    builtin|
    caller|
    cd|
    command|
    compgen|
    complete|
    declare|
    dirs|
    disown|
    echo|
    enable|
    eval|
    exec|
    exit|
    export|
    false|
    fc|
    fg|
    getopts|
    hash|
    help|
    history|
    jobs|
    kill|
    let|
    local|
    logout|
    nice|
    nohup|
    popd|
    printf|
    pushd|
    pwd|
    readarray|
    readonly|
    read|
    setenv|
    set|
    shift|
    shopt|
    source|
    suspend|
    test|
    times|
    time|
    trap|
    true|
    typeset|
    type|
    ulimit|
    umask|
    unalias|
    unset|
    wait
  )'
contexts:

  main:
    - include: main_except_execution
    - include: execution

  # backtick is deprecated and annoying to parse
  main_in_backtick_interpolation:
    # all other things except an executable command
    - include: comment
    - include: pipeline
    - include: list
    - include: compound_command
    - include: loop
    - include: string
    - include: variable_in_backtick
    - include: interpolation_not_backtick
    - include: redirection_in_backtick
    - include: pathname
    - include: keyword
    - include: execution_in_backtick_interpolation

  main_except_execution:
    # all other things except an executable command
    - include: comment
    - include: pipeline
    - include: list
    - include: compound_command
    - include: loop
    - include: function_definition
    - include: string
    - include: variable
    - include: interpolation
    - include: heredoc
    - include: herestring
    - include: redirection
    - include: pathname
    - include: keyword

  comment:
    - match: (\s|^)(?=#(?!\{))
      push:
        - match: (#)(?!\{).*$
          scope: comment.line.number-sign.shell
          captures:
            1: punctuation.definition.comment.shell
          pop: true

  case_clause:
    - match: (?=\s?\S)
      push:
        - meta_scope: meta.scope.case-clause.shell
        - match: (?=(\s|^)(esac)(\s|$))
          pop: true
        - match: ;;
          scope: punctuation.terminator.case-clause.shell
          pop: true
        - match: \)
          scope: punctuation.definition.case-pattern.shell
          push:
            - meta_scope: meta.scope.case-clause-body.shell
            - match: (?=(\s|^)(esac)(\s|$))
              pop: true
            - match: (?=;;)
              pop: true
            - include: main
        - match: \(|(?=\S)
          scope: punctuation.definition.case-pattern.shell
          push:
            - meta_scope: meta.scope.case-pattern.shell
            - match: (?=\))
              pop: true
            - match: \|
              scope: punctuation.separator.pipe-sign.shell
            - include: string
            - include: variable
            - include: interpolation
            - include: pathname

  compound_command:
    - match: \[{2}(?=\s)
      scope: punctuation.definition.logical-expression.shell
      push:
        - meta_scope: meta.scope.logical-expression.shell
        - match: \s(\]{2})
          captures:
            1: punctuation.definition.logical-expression.shell
          pop: true
        - include: double_square_pattern_matching
        - include: logical_expression
        - include: main_except_execution
    - match: \[(?=\s)
      scope: punctuation.definition.logical-expression.shell
      push:
        - meta_scope: meta.scope.logical-expression.shell
        - match: \s(\])
          captures:
            1: punctuation.definition.logical-expression.shell
          pop: true
        - include: logical_expression
        - include: main_except_execution
    - match: \({2}
      scope: punctuation.definition.string.begin.shell
      push:
        - match: \){2}
          scope: punctuation.definition.string.end.shell
          pop: true
        # variable without $ prefix
        - match: \b{{variable_name}}\b
          scope: variable.other.c-style.shell
        - include: math
    - match: \(
      scope: punctuation.definition.subshell.shell
      push:
        - meta_scope: meta.scope.subshell.shell
        - match: \)
          scope: punctuation.definition.subshell.shell
          pop: true
        - include: main
    - match: \{
      scope: punctuation.definition.group.shell
      push:
        - meta_scope: meta.scope.group.shell
        - match: (?=.*;\s*\}$)
          set: in_compact_square_compound
        - match: ''
          set: in_non_compact_square_compound

  in_non_compact_square_compound:
    - meta_scope: meta.scope.group.shell
    - match: (^|;)\s*(\})
      captures:
        1: keyword.operator.list.shell
        2: punctuation.definition.group.shell
      pop: true
    - include: main

  in_compact_square_compound:
    - match: (<<-?)\s*(EOF)(?=;|\s|$)
      captures:
        1: keyword.operator.heredoc.shell
        2: keyword.control.heredoc-token.shell
      set:
        - meta_scope: meta.scope.group.shell
        - match: $
          set: in_heredoc_interpretive
        - match: (^|;)\s*(\})
          captures:
            1: keyword.operator.list.shell
            2: punctuation.definition.group.shell
          set: in_heredoc_interpretive
        - include: main
    - match: >-
        (?x:
          (<<-?)\s*
          (?: "(EOF)" | '(EOF)' )
        )
      captures:
        1: keyword.operator.heredoc.shell
        2: keyword.control.heredoc-token.shell
        3: keyword.control.heredoc-token.shell
      set:
        - meta_scope: meta.scope.group.shell
        - match: (^|;)\s*(\})
          captures:
            1: keyword.operator.list.shell
            2: punctuation.definition.group.shell
          set: in_heredoc_non_interpretive
        - include: main
    - match: (^|;)\s*(\})
      captures:
        1: keyword.operator.list.shell
        2: punctuation.definition.group.shell
      pop: true
    - include: main

  function_definition:
    - match: \b(function)\s+([^\s\\(]+)\s*(\(\s*\))?
      captures:
        1: storage.type.function.shell
        2: entity.name.function.shell
        3: punctuation.definition.arguments.shell
      push:
        - meta_scope: meta.function.shell
        - match: ;|&|$
          scope: punctuation.definition.function.shell
          pop: true
        - include: main
    - match: \b([^\s\\=]+)\s*(\(\))
      captures:
        1: entity.name.function.shell
        2: punctuation.definition.arguments.shell
      push:
        - meta_scope: meta.function.shell
        - match: '[;&]|$'
          scope: punctuation.definition.function.shell
          pop: true
        - include: main

  heredoc:
    - match: (<<-?)\s*(EOF)(?=;|\s|$)
      captures:
        1: keyword.operator.heredoc.shell
        2: keyword.control.heredoc-token.shell
      push:
        - match: $
          set: in_heredoc_interpretive
        - include: main
    - match: >-
        (?x:
          (<<-?)\s*
          (?: "(EOF)" | '(EOF)' )
        )
      captures:
        1: keyword.operator.heredoc.shell
        2: keyword.control.heredoc-token.shell
        3: keyword.control.heredoc-token.shell
      push:
        - match: $
          set: in_heredoc_non_interpretive
        - include: main

  in_heredoc_interpretive:
    - meta_content_scope: string.unquoted.heredoc.shell
    - include: escaped_char
    - match: ^\s*(EOF)\s*$
      captures:
        1: keyword.control.heredoc-token.shell
      pop: true
    - include: variable
    - include: interpolation

  in_heredoc_non_interpretive:
    - meta_content_scope: string.unquoted.heredoc.shell
    - match: ^\s*(EOF)\s*$
      captures:
        1: keyword.control.heredoc-token.shell
      pop: true

  herestring:
    - match: (<<<)((')[^']*('))
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.quoted.single.herestring.shell
        3: punctuation.definition.string.begin.shell
        4: punctuation.definition.string.end.shell
    - match: (<<<)((")(\\("|\\)|[^"])*("))
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.quoted.double.herestring.shell
        3: punctuation.definition.string.begin.shell
        6: punctuation.definition.string.end.shell
    - match: (<<<)(([^\s\\]|\\.)+)
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.unquoted.herestring.shell

  interpolation:
    - include: interpolation_backtick
    - include: interpolation_not_backtick

  interpolation_not_backtick:
    - match: \$\({2}
      scope: punctuation.definition.string.begin.shell
      push: c-style_manipulation
    - match: \$\(
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.dollar.shell
        - match: \)
          scope: punctuation.definition.string.end.shell
          pop: true
        - include: main

  interpolation_backtick:
    - match: '`'
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.backtick.shell
        - match: '`'
          scope: punctuation.definition.string.end.shell
          pop: true
        - match: \\[`\\$]
          scope: constant.character.escape.shell
        - include: main_in_backtick_interpolation
          # there is no nested backtick interpolation in Bash

  c-style_manipulation:
    - meta_scope: string.other.math.shell
    - include: c-style_manipulation_parentheses_balancing
    - match: \){2}
      scope: punctuation.definition.string.end.shell
      pop: true
    - match: \)
      scope: punctuation.definition.string.end.shell
      set:
        - match: \)
          scope: punctuation.definition.string.end.shell
          pop: true
        - include: redirection
    - include: math

  c-style_manipulation_parentheses_balancing:
    - match: \(
      scope: meta.reset.color
      push:
        - include: c-style_manipulation_parentheses_balancing
        - match: \)
          scope: meta.reset.color
          pop: true
    # variable without $ prefix
    - match: \b{{variable_name}}\b
      scope: variable.other.c-style.shell
    - include: math

  keyword:
    - match: (?:\s|^)(if|then|else|elif|fi|for|in|do|done|select|case|continue|break|esac|while|until|return)(?=\s|$)
      captures:
        1: keyword.control.shell

  list:
    - match: (;)(then|do)(?=\s|$)
      captures:
        1: keyword.operator.list.shell
        2: keyword.control.shell
    - match: ;|&&|&(?!>)|\|\|
      scope: keyword.operator.list.shell

  double_square_pattern_matching:
    - match: =~(?=\s)
      scope: keyword.operator.logical.shell
      push:
        - match: (?=\s\]{2})
          pop: true
        - include: string
        - include: variable
        - include: interpolation
        - match: (?=[^\s])
          push: scope:source.regexp
          with_prototype:
            - match: (?=\s\]{2})
              pop: true

  logical_expression:
    - match: =[=~]?|!=?|<|>|&&|\|\|
      scope: keyword.operator.logical.shell
    - match: (?:\s|^)((-)(?:nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN]))(?=\s|$)
      captures:
        1: keyword.operator.logical.shell
        2: punctuation.definition.logical.shell

  loop:
    - match: (?:\s|^)(for)\s+(?=\({2})
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.for-loop.shell
        - match: (?:\s|^)(done)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: (?:\s|^)(for)\s+((?:[^\s\\]|\\.)+)(?=\s|$)
      captures:
        1: keyword.control.shell
        2: variable.other.loop.shell
      push:
        - meta_scope: meta.scope.for-in-loop.shell
        - match: (?:\s|^)(done)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: (?:\s|^)(while|until)(?=\s|$)
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.while-loop.shell
        - match: (?:\s|^)(done)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: '(?:\s|^)(select)\s+((?:[^\s\\]|\\.)+)(?=\s|$)'
      captures:
        1: keyword.control.shell
        2: variable.other.loop.shell
      push:
        - meta_scope: meta.scope.select-block.shell
        - match: (?:\s|^)(done)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: (?:\s|^)(case)(?=\s|$)
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.case-block.shell
        - match: (?:\s|^)(esac)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - match: (?:\s|^)(in)(?=\s|$)
          captures:
            1: keyword.control.shell
          push:
            - meta_scope: meta.scope.case-body.shell
            - match: (?=(\s|^)(esac)(\s|$))
              pop: true
            - include: comment
            - include: case_clause
            - include: main
        - include: main
    - match: (?:\s|^)(if)(?=\s|$)
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.if-block.shell
        - match: (?=.*;\s*(fi)$)
          set: in_compact_if
        - match: ''
          set: in_non_compact_if

  in_non_compact_if:
    - meta_scope: meta.scope.if-block.shell
    - match: (?:\s|^)(fi)(?=;|\s|$)
      captures:
        1: keyword.control.shell
      pop: true
    - include: main

  in_compact_if:
    - match: (<<-?)\s*(EOF)(?=;|\s|$)
      captures:
        1: keyword.operator.heredoc.shell
        2: keyword.control.heredoc-token.shell
      set:
        - meta_scope: meta.scope.if-block.shell
        - match: $
          set: in_heredoc_interpretive
        - match: (?:\s|^)(fi)(?=;|\s|$)
          captures:
            1: keyword.control.shell
          set: in_heredoc_interpretive
        - include: main
    - match: (<<-?)\s*(["'])(EOF)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      set:
        - meta_scope: meta.scope.if-block.shell
        - match: (?:\s|^)(fi)(?=;|\s|$)
          captures:
            1: keyword.control.shell
          set: in_heredoc_non_interpretive
        - include: main
    - match: (?:\s|^)(fi)(?=;|\s|$)
      captures:
        1: keyword.control.shell
      pop: true
    - include: main

  math:
    - include: variable
    - match: \+{1,2}|-{1,2}|!|~|\*{1,2}|/|%|([=!*/%+\-&^|]|<<?|>>?)?=|^|\|{1,2}|&{1,2}|[?:,<>]
      scope: keyword.operator.arithmetic.shell
    - match: 0[xX]\h+
      scope: constant.numeric.hex.shell
    - match: 0[0-9]+
      scope: constant.numeric.octal.shell
    - match: '[0-9]{1,2}#[0-9a-zA-Z_@]+'
      scope: constant.numeric.other.shell
    - match: '[0-9]+'
      scope: constant.numeric.integer.shell

  pathname:
    - match: ({{variable_name}})(=)(?=\s*$|[^\s])
      captures:
        2: keyword.operator.assign.shell
      push: [ cmd_args, assigned_true_false ]
    - match: '~'
      scope: keyword.operator.tilde.shell
    - match: '[*?]'
      scope: keyword.operator.glob.shell
    - match: ([?*+@!])(\()
      captures:
        1: keyword.operator.extglob.shell
        2: punctuation.definition.extglob.shell
      push:
        - meta_scope: meta.structure.extglob.shell
        - match: \)
          scope: punctuation.definition.extglob.shell
          pop: true
        - include: main

  pipeline:
    - match: '[|!]'
      scope: keyword.operator.pipe.shell

  # ref: http://www.tldp.org/LDP/abs/html/io-redirection.html
  redirection:
    - match: '[><]\('
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.process-substitution.shell
        - match: \)
          scope: punctuation.definition.string.end.shell
          pop: true
        - include: main
    # from file-descriptor to file-descriptor
    - match: ([0-9]+|[&])?((?:[<>]|>>|<<|<>)(?:[&]))\s*([0-9]+|[-])(?=[;|!)]|\s|$)
      captures:
        1: constant.numeric.file-descriptor.shell
        2: keyword.operator.redirect.shell
        3: constant.numeric.file-descriptor.shell
      push: cmd_args
    # from file-descriptor to file
    # from file to file-descriptor
    - match: ([0-9]+|[&])?((?:[<>]|>>|<<|<>)(?:[!|]?))
      captures:
        1: constant.numeric.file-descriptor.shell
        2: keyword.operator.redirect.shell
      push: cmd_args

  redirection_in_backtick:
    - match: '[><]\('
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.process-substitution.shell
        - match: \)
          scope: punctuation.definition.string.end.shell
          pop: true
        - include: main
    # from file-descriptor to file-descriptor
    - match: ([0-9]+|[&])?((?:[<>]|>>|<<|<>)(?:[&]))\s*([0-9]+|[-])(?=[;|!)]|\s|$)
      captures:
        1: constant.numeric.file-descriptor.shell
        2: keyword.operator.redirect.shell
        3: constant.numeric.file-descriptor.shell
      push: cmd_args_in_backtick_interpolation
    # from file-descriptor to file
    # from file to file-descriptor
    - match: ([0-9]+|[&])?((?:[<>]|>>|<<|<>)(?:[!|]?))
      captures:
        1: constant.numeric.file-descriptor.shell
        2: keyword.operator.redirect.shell
      push: cmd_args_in_backtick_interpolation

  escaped_char:
    - match: \\.
      scope: constant.character.escape.shell

  string:
    - include: escaped_char
    - match: "'"
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.single.shell
        - match: "'"
          scope: punctuation.definition.string.end.shell
          pop: true
    - match: \$?"
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.double.shell
        - match: '"'
          scope: punctuation.definition.string.end.shell
          pop: true
        - match: \\[\$`"\\\n]
          scope: constant.character.escape.shell
        - include: variable
        - include: interpolation
    - match: \$'
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.single.dollar.shell
        - match: "'"
          scope: punctuation.definition.string.end.shell
          pop: true
        - match: \\(a|b|e|f|n|r|t|v|\\|')
          scope: constant.character.escape.ansi-c.shell
        - match: \\[0-9]{3}
          scope: constant.character.escape.octal.shell
        - match: \\x[0-9a-fA-F]{2}
          scope: constant.character.escape.hex.shell
        - match: \\c.
          scope: constant.character.escape.control-char.shell

  execution:
    - match: (?:\s|^)([:.])(?=;|\s|$)
      captures:
        1: support.function.builtin.shell
    - match: ({{cmd_privilege}})(?=[\s><&;|`)]|\\\n|$)
      scope: support.function.privilege.shell
      push: cmd_args
    - match: ({{cmd_builtin}})(?=[\s><&;|`)]|\\\n|$)
      scope: support.function.builtin.shell
      push: cmd_args
    - match: ({{cmd_external}})(?=[\s><&;|`)]|\\\n|$)
      scope: support.function.external.shell
      push: cmd_args
    - match: ({{cmd_unknown}})(?=[\s><&;|`)]|\\\n|$)
      push: cmd_args

  execution_in_backtick_interpolation:
    # the same with "execution" but calls "cmd_args_in_backtick_interpolation"
    - match: (?:\s|^)([:.])(?=;|\s|$)
      captures:
        1: support.function.builtin.shell
    - match: ({{cmd_privilege}})(?=[\s><&;|`)]|\\\n|$)
      scope: support.function.privilege.shell
      push: cmd_args_in_backtick_interpolation
    - match: ({{cmd_builtin}})(?=[\s><&;|`)]|\\\n|$)
      scope: support.function.builtin.shell
      push: cmd_args_in_backtick_interpolation
    - match: ({{cmd_external}})(?=[\s><&;|`)]|\\\n|$)
      scope: support.function.external.shell
      push: cmd_args_in_backtick_interpolation
    - match: ({{cmd_unknown}})(?=[\s><&;|`)]|\\\n|$)
      push: cmd_args_in_backtick_interpolation

  cmd_args:
    - meta_content_scope: meta.reset.color
    # cmd_args can have interpolations
    - include: interpolation
    - include: cmd_args_COMMAND_PART
    - include: redirection

  cmd_args_in_backtick_interpolation:
    - meta_content_scope: meta.reset.color
    # "`" should result in popping
    - match: (?=\s*[`])
      pop: true
    - include: cmd_args_COMMAND_PART
    - include: redirection_in_backtick

  cmd_args_COMMAND_PART:
    - match: (?=\s*[()<>&;|]|\n)
      pop: true
    - match: (\\)\n
      captures:
        1: punctuation.definition.multiline.shell
    - include: comment
    - include: string
    - include: variable
    - include: heredoc
    - include: herestring
    - include: pathname
    - include: command_switch

  command_switch:
    - match: '(^|\s)(?=-+[^-\s])'
      push:
        - meta_content_scope: support.command-switch.shell
        - match: -+
          scope: punctuation.definition.command-switch.shell
          set:
            - match: '[0-9a-zA-Z_-]+'
              scope: support.command-switch.shell
            - match: '='
              scope: keyword.operator.assign.shell
              push: assigned_true_false
            - match: ''
              pop: true

  assigned_true_false:
    - match: (?i:true)(?=;|\s|$)
      scope: variable.other.true.shell
      pop: true
    - match: (?i:false)(?=;|\s|$)
      scope: variable.other.false.shell
      pop: true
    - match: ''
      pop: true

  variable:
    - match: (\$)[-*@#?$!0_]
      scope: variable.other.special.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: (\$)[1-9]
      scope: variable.other.positional.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: (\$){{variable_name}}
      scope: variable.other.normal.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: \$\{
      scope: punctuation.definition.variable.shell
      push:
        - meta_scope: variable.other.bracket.shell
        - match: \}
          scope: punctuation.definition.variable.shell
          pop: true
        - match: (\[)([^\]]+)(\])
          captures:
            1: punctuation.section.array.shell
            3: punctuation.section.array.shell
        - include: variable_first_match_operator
        - include: variable_first_match_variable
        - include: string
        - include: variable
        - include: interpolation

  variable_in_backtick:
    - match: (\$)[-*@#?$!0_]
      scope: variable.other.special.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: (\$)[1-9]
      scope: variable.other.positional.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: (\$){{variable_name}}
      scope: variable.other.normal.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: \$\{
      scope: punctuation.definition.variable.shell
      push:
        - meta_scope: variable.other.bracket.shell
        - match: \}
          scope: punctuation.definition.variable.shell
          pop: true
        - match: (\[)([^\]]+)(\])
          captures:
            1: punctuation.section.array.shell
            3: punctuation.section.array.shell
        - include: variable_first_match_operator
        - include: variable_first_match_variable
        - include: string
        - include: variable_in_backtick
        - include: interpolation_not_backtick

  variable_first_match_operator:
    - match: '#'
      scope: keyword.operator.length.shell
      push:
        - match: (?=})
          pop: true
    - match: '!'
      scope: keyword.operator.match.shell
      push:
        - match: (?=})
          pop: true
        - match: '[@*](?=\})'
          scope: keyword.operator.match.shell

  variable_first_match_variable:
    - match: '{{variable_name}}'
      push:
        - meta_scope: variable.other.bracket.shell
        - match: (?=})
          pop: true
        - include: variable_substring_replacement
        - include: variable_case_conversion
        - include: string
        - include: interpolation

  variable_substring_replacement:
    # matching: ${var/Pattern/Replacement}
    - match: /[#%/]?
      scope: keyword.operator.substringreplacement.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: (?=})
          pop: true
        - match: /
          scope: keyword.operator.substringreplacement.shell
          push:
            - match: (?=})
              pop: true
            - include: string
            - include: variable
            - include: interpolation
        - include: string
        - include: variable
        - include: interpolation
    # matching: ${var##Pattern}
    - match: '[#%]{1,2}'
      scope: keyword.operator.substringremoval.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: (?=})
          pop: true
        - include: string
        - include: variable
        - include: interpolation
    # matching: ${foo:+bar}
    - match: :?[+\-=?]
      scope: keyword.operator.substringreplacement.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: (?=})
          pop: true
        - include: string
        - include: variable
        - include: interpolation
    # matching: ${var:pos:len}
    - match: ':'
      scope: keyword.operator.expansion.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: (?=})
          pop: true
        - match: ':'
          scope: keyword.operator.expansion.shell
          push:
            - match: (?=})
              pop: true
            - include: string
            - include: variable
            - include: interpolation
        - include: string
        - include: variable
        - include: interpolation

  variable_case_conversion:
    # matching: ${foo,,Pattern}
    - match: ',{1,2}'
      scope: keyword.operator.lowercase.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: (?=})
          pop: true
        - include: string
        - include: variable
        - include: interpolation
    # matching: ${foo^^Pattern}
    - match: \^{1,2}
      scope: keyword.operator.uppercase.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: (?=})
          pop: true
        - include: string
        - include: variable
        - include: interpolation
