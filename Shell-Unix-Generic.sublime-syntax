%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: ShellScript Improved
file_extensions:
  - bash
  - csh
  - sh
  - tcsh
  - zsh
  - .bash_aliases
  - .bash_functions
  - .bash_login
  - .bash_logout
  - .bash_profile
  - .bash_variables
  - .bashrc
  - .cshrc
  - .profile
  - .tcshrc
  - .textmate_init
  - .zshrc
first_line_match: '^#!.*\b(bash|zsh|sh|csh|tcsh)\b|^#\s*-\*-[^*]*mode:\s*shell-script[^*]*-\*-'
scope: source.shell
variables:
  cmdExternal: '(?x:
    7za|
    7z|
    apropos|
    apt-get|
    aptitude|
    aria2c|
    ar|
    aspell|
    autoconf|
    awk|
    base64|
    basename|
    bash|
    bc|
    brew|
    bzip2|
    cal|
    cat|
    cc|
    cfdisk|
    chfn|
    chgrp|
    chkconfig|
    chmod|
    chown|
    chpasswd|
    chroot|
    chsh|
    cksum|
    clang|
    clear|
    cmake|
    cmp|
    column|
    comm|
    composer|
    cp|
    crontab|
    cron|
    csh|
    csplit|
    curl|
    cut|
    date|
    dc|
    ddrescue|
    dd|
    deb|
    depmod|
    df|
    diff|
    dig|
    dircolors|
    dirname|
    dir|
    dmesg|
    dpkg|
    du|
    easy_install|
    egrep|
    eject|
    emacs|
    env|
    expand|
    expect|
    expr|
    fdformat|
    fdisk|
    fgrep|
    file|
    find|
    finger|
    fmt|
    fold|
    format|
    free|
    fsck|
    ftp|
    function|
    fuser|
    g\+\+|
    gawk|
    gcc|
    gem|
    getfacl|
    git|
    gpasswd|
    grep|
    groupadd|
    groupdel|
    groupmd|
    groups|
    gzip|
    head|
    hg|
    homebrew|
    hostname|
    htop|
    iconv|
    id|
    ifconfig|
    ifdown|
    ifup|
    import|
    insmod|
    jar|
    java|
    join|
    kermit|
    killall|
    kmod|
    less|
    lftp|
    link|
    llvm|
    ln|
    locate|
    logname|
    look|
    loout|
    lpc|
    lpq|
    lprintd|
    lprintq|
    lprint|
    lprm|
    lpr|
    lsod|
    lsof|
    ls|
    lua|
    mail|
    make|
    man|
    md5sum|
    mesg|
    mkdir|
    mkfifo|
    mkisofs|
    mknod|
    mmv|
    modinfo|
    modprobe|
    more|
    most|
    mount|
    mtools|
    mtr|
    mutt|
    mv|
    mysqldump|
    mysql|
    netstat|
    nl|
    node|
    notify-se|
    npm|
    nslookup|
    nstat|
    openssl|
    open|
    op|
    pandoc|
    passwd|
    paste|
    patch|
    pathchk|
    pear|
    pecl|
    perl|
    php|
    ping|
    pip|
    pkill|
    printcap|
    pr|
    ps|
    pv|
    pwck|
    pwconv|
    pwunconv|
    python|
    py|
    qmake|
    quotachec|
    quotactl|
    quota|
    ram|
    rar|
    rcp|
    realpath|
    reboot|
    remsync|
    renae|
    renice|
    rev|
    rmdir|
    rmmod|
    rm|
    rpm|
    rsync|
    ruby|
    scp|
    screen|
    sdiff|
    sed|
    select|
    seq|
    service|
    setfacl|
    sftp|
    shutdown|
    sh|
    sleep|
    slocate|
    sort|
    split|
    sqlite|
    sshfs|
    ssh|
    stat|
    strace|
    subl|
    sudo|
    sum|
    susend|
    su|
    svn|
    sync|
    sysctl|
    tail|
    tar|
    tcsh|
    tee|
    test|
    thtool|
    tig|
    timeout|
    top|
    touch|
    tput|
    tracerout|
    tr|
    tsort|
    tty|
    umount|
    uname|
    unexpand|
    unil|
    uniq|
    units|
    unlink|
    unrar|
    unshar|
    unzip|
    updatedb|
    uptime|
    useradd|
    userdel|
    usermod|
    users|
    uudecode|
    uuencode|
    vim|
    visudo|
    vi|
    vmstat|
    wall|
    watch|
    wc|
    wget|
    whatis|
    whereis|
    which|
    whoami|
    who|
    write|
    w|
    xargs|
    xdg-open|
    xxd|
    xz|
    yes|
    ypcat|
    ypchfn|
    ypchsh|
    yppasswd|
    yptest|
    ypwhich|
    yum|
    zip|
    zsh
  )(?:[._+\-\d]*)'
  cmdBuiltin: '(?x:
    alias|
    bg|
    bind|
    builtin|
    caller|
    cd|
    command|
    compgen|
    complete|
    declare|
    dirs|
    disown|
    echo|
    enable|
    eval|
    exec|
    exit|
    export|
    false|
    fc|
    fg|
    getopts|
    hash|
    help|
    history|
    jobs|
    kill|
    let|
    local|
    logout|
    nice|
    nohup|
    popd|
    printf|
    pushd|
    pwd|
    readarray|
    readonly|
    read|
    setenv|
    set|
    shift|
    shopt|
    source|
    suspend|
    test|
    times|
    time|
    trap|
    true|
    typeset|
    type|
    ulimit|
    umask|
    unalias|
    unset|
    wait
  )'
contexts:
  main:
    - include: exceptExecution
    - include: execution
  mainInInterpolation:
    # the same with "main" but includes "executionInInterpolation" rather than "execution"
    - include: exceptExecution
    - include: executionInInterpolation
  exceptExecution:
    # all other things except an executable command
    - include: comment
    - include: pipeline
    - include: list
    - include: compound-command
    - include: loop
    - include: function-definition
    - include: string
    - include: variable
    - include: interpolation
    - include: heredoc
    - include: herestring
    - include: redirection
    - include: pathname
    - include: keyword
  comment:
    - match: '(?<!\S)(#)(?!\{).*$'
      scope: comment.line.number-sign.shell
      captures:
        1: punctuation.definition.comment.shell
  case-clause:
    - match: (?=\S)
      push:
        - meta_scope: meta.scope.case-clause.shell
        - match: ;;
          captures:
            0: punctuation.terminator.case-clause.shell
          pop: true
        - match: (\(|(?=\S))
          captures:
            0: punctuation.definition.case-pattern.shell
          push:
            - meta_scope: meta.scope.case-pattern.shell
            - match: \)
              captures:
                0: punctuation.definition.case-pattern.shell
              pop: true
            - match: \|
              scope: punctuation.separator.pipe-sign.shell
            - include: string
            - include: variable
            - include: interpolation
            - include: pathname
        - match: (?<=\))
          push:
            - meta_scope: meta.scope.case-clause-body.shell
            - match: (?=;;)
              pop: true
            - include: main
  compound-command:
    - match: '(\[{2})'
      captures:
        1: punctuation.definition.logical-expression.shell
      push:
        - meta_scope: meta.scope.logical-expression.shell
        - match: '(\]{2})'
          captures:
            1: punctuation.definition.logical-expression.shell
          pop: true
        - include: logical-expression
        - include: main
    - match: '(\[)'
      captures:
        1: punctuation.definition.logical-expression.shell
      push:
        - meta_scope: meta.scope.logical-expression.shell
        - match: '(\])'
          pop: true
        - include: logical-expression
        - include: main
    - match: '(\({2})'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.other.math.shell
        - match: '(\){2})'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: math
    - match: (\()
      captures:
        1: punctuation.definition.subshell.shell
      push:
        - meta_scope: meta.scope.subshell.shell
        - match: (\))
          captures:
            1: punctuation.definition.subshell.shell
          pop: true
        - include: math
          # tcsh fix: if ( "a" != "b" ) then
          #                    ^^ this should a logic operator
        - include: main
    - match: '(?<=\s|^)(\{)(?=\s|$)'
      captures:
        1: punctuation.definition.group.shell
      push:
        - meta_scope: meta.scope.group.shell
        - match: '(?<=^|;)\s*(\})'
          captures:
            1: punctuation.definition.group.shell
          pop: true
        - include: main
  function-definition:
    - match: '\b(function)\s+([^\s\\]+)(?:\s*(\(\)))?'
      captures:
        1: storage.type.function.shell
        2: entity.name.function.shell
        3: punctuation.definition.arguments.shell
      push:
        - meta_scope: meta.function.shell
        - match: ;|&|$
          captures:
            0: punctuation.definition.function.shell
          pop: true
        - include: main
    - match: '\b([^\s\\=]+)\s*(\(\))'
      captures:
        1: entity.name.function.shell
        2: punctuation.definition.arguments.shell
      push:
        - meta_scope: meta.function.shell
        - match: ;|&|$
          captures:
            0: punctuation.definition.function.shell
          pop: true
        - include: main
  heredoc:
    - match: (<<-)\s*("|'|)(RUBY)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.ruby.shell
        - meta_content_scope: source.ruby.embedded.shell
        - match: ^\t*(RUBY)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.ruby
    - match: (<<)("|'|)(RUBY)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.ruby.shell
        - meta_content_scope: source.ruby.embedded.shell
        - match: ^(RUBY)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.ruby
    - match: (<<-)\s*("|'|)(PYTHON)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.python.shell
        - meta_content_scope: source.python.embedded.shell
        - match: ^\t*(PYTHON)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.python
    - match: (<<)("|'|)(PYTHON)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.python.shell
        - meta_content_scope: source.python.embedded.shell
        - match: ^(PYTHON)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.python
    - match: (<<-)\s*("|'|)(APPLESCRIPT)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.applescript.shell
        - meta_content_scope: source.applescript.embedded.shell
        - match: ^\t*(APPLESCRIPT)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.applescript
    - match: (<<)("|'|)(APPLESCRIPT)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.applescript.shell
        - meta_content_scope: source.applescript.embedded.shell
        - match: ^(APPLESCRIPT)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.applescript
    - match: (<<-)\s*("|'|)(HTML)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.html.shell
        - meta_content_scope: text.html.embedded.shell
        - match: ^\t*(HTML)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.basic
    - match: (<<)("|'|)(HTML)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.html.shell
        - meta_content_scope: text.html.embedded.shell
        - match: ^(HTML)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.basic
    - match: (<<-)\s*("|'|)(MARKDOWN)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.markdown.shell
        - meta_content_scope: text.html.markdown.embedded.shell
        - match: ^\t*(MARKDOWN)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.markdown
    - match: (<<)("|'|)(MARKDOWN)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.markdown.shell
        - meta_content_scope: text.html.markdown.embedded.shell
        - match: ^(MARKDOWN)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.markdown
    - match: (<<-)\s*("|'|)(TEXTILE)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.textile.shell
        - meta_content_scope: text.html.textile.embedded.shell
        - match: ^\t*(TEXTILE)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.textile
    - match: (<<)("|'|)(TEXTILE)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.textile.shell
        - meta_content_scope: text.html.textile.embedded.shell
        - match: ^(TEXTILE)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.textile
    - match: (<<-?)\s*("|'|\s*)(EOF)\n
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_content_scope: string.unquoted.heredoc.shell
        - match: ^(EOF)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
    - match: (<<)-("|'|)\\?(\w+)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.shell
        - match: ^\t*(\3)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
    - match: (<<)("|'|)\\?(\w+)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.shell
        - match: ^(\3)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
  herestring:
    - match: "(<<<)((')[^']*('))"
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.quoted.single.herestring.shell
        3: punctuation.definition.string.begin.shell
        4: punctuation.definition.string.end.shell
    - match: '(<<<)((")(\\("|\\)|[^"])*("))'
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.quoted.double.herestring.shell
        3: punctuation.definition.string.begin.shell
        6: punctuation.definition.string.end.shell
    - match: '(<<<)(([^\s\\]|\\.)+)'
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.unquoted.herestring.shell
  interpolation:
    - match: '\$\({2}'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.other.math.shell
        - match: '\){2}'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: '\)'
          captures:
            0: punctuation.definition.string.end.shell
          set:
            - match: '\)'
              captures:
                0: punctuation.definition.string.end.shell
              pop: true
            - include: redirection
        - include: math
    - match: "`"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.backtick.shell
        - match: "`"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: '\\[`\\$]'
          scope: constant.character.escape.shell
        - include: mainInInterpolation
          # there is no nested interpolation in Bash
    - match: \$\(
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.dollar.shell
        - match: \)
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: mainInInterpolation
          # there is no nested interpolation in Bash
  keyword:
    - match: (?<=\s|^)(?:if|then|else|elif|fi|endif|for|in|do|done|select|case|continue|break|esac|while|until|return)(?=\s|$)
      scope: keyword.control.shell
  list:
    - match: ;|&&|&|\|\|
      scope: keyword.operator.list.shell
  logical-expression:
    - match: '=[=~]?|!=?|<|>|&&|\|\|'
      comment: do we want a special rule for ( expr )?
      scope: keyword.operator.logical.shell
    - match: '(?<!\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])'
      scope: keyword.operator.logical.shell
  loop:
    - match: '(?<=\s|^)(for)\s+(?=\({2})'
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.for-loop.shell
        - match: (?<=\s|^)(done)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: '(?<=\s|^)(for)\s+((?:[^\s\\]|\\.)+)(?=\s|$)'
      captures:
        1: keyword.control.shell
        2: variable.other.loop.shell
      push:
        - meta_scope: meta.scope.for-in-loop.shell
        - match: (?<=\s|^)(done)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: (?<=\s|^)(while|until)(?=\s|$)
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.while-loop.shell
        - match: (?<=\s|^)(done)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: '(?<=\s|^)(select)\s+((?:[^\s\\]|\\.)+)(?=\s|$)'
      captures:
        1: keyword.control.shell
        2: variable.other.loop.shell
      push:
        - meta_scope: meta.scope.select-block.shell
        - match: (?<=\s|^)(done)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: (?<=\s|^)(case)(?=\s|$)
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.case-block.shell
        - match: (?<=\s|^)(esac)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - match: (?<=\s|^)(in)(?=\s|$)
          captures:
            1: keyword.control.shell
          push:
            - meta_scope: meta.scope.case-body.shell
            - match: (?<=\s|^)(esac)(?=\s|$)
              captures:
                1: keyword.control.shell
              pop: true
            - include: comment
            - include: case-clause
            - include: main
        - include: main
    - match: (?<=\s|^)(if)(?=\s|$)
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.if-block.shell
        - match: (?<=\s|^)(fi)(?=\s|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
  math:
    - include: variable
    - match: '\+{1,2}|-{1,2}|!|~|\*{1,2}|/|%|([=!*/%+\-&^|]|<<?|>>?)?=|^|\|{1,2}|&{1,2}|[?:,<>]'
      scope: keyword.operator.arithmetic.shell
    - match: '0[xX]\h+'
      scope: constant.numeric.hex.shell
    - match: '0\d+'
      scope: constant.numeric.octal.shell
    - match: '\d{1,2}#[0-9a-zA-Z@_]+'
      scope: constant.numeric.other.shell
    - match: \d+
      scope: constant.numeric.integer.shell
  pathname:
    - match: '(?<=[a-zA-Z0-9_])=(?=\s*$|[^\s])'
      scope: keyword.operator.assign.shell
    - match: (?<=\s|:|=|^)~
      scope: keyword.operator.tilde.shell
    - match: \*|\?
      scope: keyword.operator.glob.shell
    - match: '([?*+@!])(\()'
      captures:
        1: keyword.operator.extglob.shell
        2: punctuation.definition.extglob.shell
      push:
        - meta_scope: meta.structure.extglob.shell
        - match: (\))
          captures:
            1: punctuation.definition.extglob.shell
          pop: true
        - include: main
  pipeline:
    - match: "[|!]"
      scope: keyword.operator.pipe.shell
  redirection:
    - match: '[><]\('
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.process-substitution.shell
        - match: \)
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: main
    - match: '(&>|\d*>&\d*|\d*(>>|>|<)|\d*<&|\d*<>)[!|]?'
      comment: "valid: &>word >&word >word [n]>&[n] [n]<word [n]>word [n]>>word [n]<&word (last one is duplicate)"
      scope: keyword.operator.redirect.shell
      push: cmdArgs
  string:
    - match: \\.
      scope: constant.character.escape.shell
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.single.shell
        - match: "'"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
    - match: \$?"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.double.shell
        - match: '"'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: '\\[\$`"\\\n]'
          scope: constant.character.escape.shell
        - include: variable
        - include: interpolation
    - match: \$'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.single.dollar.shell
        - match: "'"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: \\(a|b|e|f|n|r|t|v|\\|')
          scope: constant.character.escape.ansi-c.shell
        - match: '\\[0-9]{3}'
          scope: constant.character.escape.octal.shell
        - match: '\\x[0-9a-fA-F]{2}'
          scope: constant.character.escape.hex.shell
        - match: \\c.
          scope: constant.character.escape.control-char.shell
  execution:
    - match: (?<=^|\s)(?::|\.)(?=\s|;|&|$)
      scope: support.function.builtin.shell
    - match: '(?<=[\s><&;|`(]|^)({{cmdBuiltin}})(?=[\s><&;|`)]|$)'
      scope: support.function.builtin.shell
      push: cmdArgs
    - match: '(?<=[\s><&;|`(]|^)({{cmdExternal}})(?=[\s><&;|`)]|$)'
      scope: support.function.external.shell
      push: cmdArgs
  executionInInterpolation:
    # the same with "support" but calls "cmdArgsInInterpolation"
    - match: (?<=^|\s)(?::|\.)(?=\s|;|&|$)
      scope: support.function.builtin.shell
    - match: '(?<=[\s><&;|`(]|^)({{cmdBuiltin}})(?=[\s><&;|`)]|$)'
      scope: support.function.builtin.shell
      push: cmdArgsInInterpolation
    - match: '(?<=[\s><&;|`(]|^)({{cmdExternal}})(?=[\s><&;|`)]|$)'
      scope: support.function.external.shell
      push: cmdArgsInInterpolation
  cmdArgs:
    - meta_content_scope: meta.reset.color
    - match: '(?=[()<>&;|]|\n)'
      pop: true
    - match: '(\\)\n'
      captures:
        1: punctuation.definition.multiline.shell
    - include: comment
    - include: string
    - include: variable
    - include: interpolation
    - include: heredoc
    - include: herestring
    - include: pathname
  cmdArgsInInterpolation:
    # "`" should result in popping
    - meta_content_scope: meta.reset.color
    - match: '(?=[`()<>&;|]|\n)'
      pop: true
    - match: '(\\)\n'
      captures:
        1: punctuation.definition.multiline.shell
    - include: comment
    - include: string
    - include: variable
    - include: heredoc
    - include: herestring
    - include: pathname
  variable:
    - match: '(\$)[-*@#?$!0_]'
      scope: variable.other.special.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '(\$)[1-9]'
      scope: variable.other.positional.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '(\$)[a-zA-Z_][a-zA-Z0-9_]*'
      scope: variable.other.normal.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '\$\{'
      captures:
        0: punctuation.definition.variable.shell
      push:
        - meta_scope: variable.other.bracket.shell
        - match: '\}'
          captures:
            0: punctuation.definition.variable.shell
          pop: true
        - match: '(\[)([^\]]+)(\])'
          captures:
            1: punctuation.section.array.shell
            3: punctuation.section.array.shell
        - include: variable_firstMatchOperator
        - include: variable_firstMatchVariable
        - include: string
        - include: variable
        - include: interpolation

  # some helper context...

  variable_firstMatchOperator:
    - match: '#'
      scope: keyword.operator.length.shell
      push:
        - match: '(?=})'
          pop: true
    - match: '!'
      scope: keyword.operator.match.shell
      push:
        - match: '(?=})'
          pop: true
        - match: '[@*](?=\})'
          scope: keyword.operator.match.shell
  variable_firstMatchVariable:
    - match: '[a-zA-Z_][\da-zA-Z_]*'
      push:
        - meta_scope: variable.other.bracket.shell
        - match: '(?=})'
          pop: true
        - include: variable_substringReplacement
        - include: variable_caseConversion
        - include: string
        - include: interpolation
  variable_substringReplacement:
    # matching: ${var/Pattern/Replacement}
    - match: '/[#%/]?'
      scope: keyword.operator.substringreplacement.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: '(?=})'
          pop: true
        - match: '/'
          scope: keyword.operator.substringreplacement.shell
          push:
            - match: '(?=})'
              pop: true
            - include: string
            - include: variable
            - include: interpolation
        - include: string
        - include: variable
        - include: interpolation
    # matching: ${var##Pattern}
    - match: '[#%]{1,2}'
      scope: keyword.operator.substringremoval.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: '(?=})'
          pop: true
        - include: string
        - include: variable
        - include: interpolation
    # matching: ${foo:+bar}
    - match: ':?[+\-=?]'
      scope: keyword.operator.substringreplacement.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: '(?=})'
          pop: true
        - include: string
        - include: variable
        - include: interpolation
    # matching: ${var:pos:len}
    - match: ':'
      scope: keyword.operator.expansion.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: '(?=})'
          pop: true
        - match: ':'
          scope: keyword.operator.expansion.shell
          push:
            - match: '(?=})'
              pop: true
            - include: string
            - include: variable
            - include: interpolation
        - include: string
        - include: variable
        - include: interpolation
  variable_caseConversion:
    # matching: ${foo,,Pattern}
    - match: ',{1,2}'
      scope: keyword.operator.lowercase.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: '(?=})'
          pop: true
        - include: string
        - include: variable
        - include: interpolation
    # matching: ${foo^^Pattern}
    - match: '\^{1,2}'
      scope: keyword.operator.uppercase.shell
      push:
        - meta_content_scope: meta.reset.color
        - match: '(?=})'
          pop: true
        - include: string
        - include: variable
        - include: interpolation
